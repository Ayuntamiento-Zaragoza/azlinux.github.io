import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as o,e as t,a as n,b as s,f as p}from"./app-d77bd025.js";const c={},l=n("p",null,[s("En "),n("strong",null,"Microsoft Word"),s(" existe una función asignada a la combinación "),n("code",null,"Mayúscula+F3"),s(" que realiza la siguiente función. Si sobre un texto seleccionado se pulsa "),n("code",null,"Mayúscula+F3"),s(" secuencialmente:")],-1),i=p(`<ul><li>El texto pasa de minúsculas a mayúsculas.</li><li>El texto pasa de mayúsculas a minúsculas con la primera letra en Mayúscula.</li><li>El texto pasa a minúsculas.</li></ul><p>Esta función en OpenOffice no existe. Pero se implementa con una macro. El autor original es <strong>Andrew Brown</strong>.</p><p>Para asignarlo a una combinación de teclas tendremos que ir a <code>HERRAMIENTAS &gt; PERSONALIZAR &gt; TECLADO</code>, buscar ahí la combinación de teclas y buscar la macro en la biblioteca de macros.</p><h2 id="programa-principal" tabindex="-1"><a class="header-anchor" href="#programa-principal" aria-hidden="true">#</a> Programa principal</h2><div class="language-vbnet line-numbers-mode" data-ext="vbnet"><pre class="language-vbnet"><code><span class="token keyword">Sub</span> ToogleCase
    acbCaseChanger
<span class="token keyword">End</span> <span class="token keyword">Sub</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="procedimiento-acbcasechanger" tabindex="-1"><a class="header-anchor" href="#procedimiento-acbcasechanger" aria-hidden="true">#</a> Procedimiento acbCaseChanger</h2><div class="language-vbnet line-numbers-mode" data-ext="vbnet"><pre class="language-vbnet"><code><span class="token keyword">Sub</span> acbCaseChanger
    ’ this <span class="token keyword">is</span> a version that does <span class="token keyword">not</span> <span class="token function">use</span> charcasemap <span class="token function">at</span> all
    ’ <span class="token keyword">to</span> <span class="token keyword">get</span> around the broken export features
    ’ which otherwise make my copy look ridiculous
    ’ see bug #<span class="token number">17056</span> <span class="token keyword">in</span> IZ
    ’ acb<span class="token punctuation">,</span> July <span class="token number">22</span> <span class="token number">2003</span>
    ’ updated September <span class="token number">3</span> <span class="token number">2003</span> <span class="token keyword">with</span> routines <span class="token keyword">to</span> <span class="token keyword">get</span> <span class="token function">round</span> the broken
    ’ word iterators which otherwise made it look silly <span class="token keyword">when</span> words start <span class="token keyword">or</span> <span class="token keyword">end</span>
    ’ <span class="token keyword">with</span> punctuation <span class="token keyword">of</span> almost any sort.
    <span class="token keyword">Dim</span> oDocument<span class="token punctuation">,</span> oDesktop <span class="token keyword">as</span> <span class="token keyword">Object</span>
    <span class="token keyword">Dim</span> oText<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> omega <span class="token keyword">as</span> <span class="token keyword">Object</span>
    <span class="token keyword">Dim</span> oVCursor<span class="token punctuation">,</span> mySelection <span class="token keyword">As</span> <span class="token keyword">Object</span>
    <span class="token keyword">Dim</span> snot <span class="token keyword">as</span> <span class="token keyword">string</span><span class="token punctuation">,</span>changeme <span class="token keyword">as</span> <span class="token keyword">string</span><span class="token punctuation">,</span> test1 <span class="token keyword">as</span> <span class="token keyword">string</span><span class="token punctuation">,</span> test2 <span class="token keyword">as</span> <span class="token keyword">string</span>

    ’<span class="token keyword">error</span> handling stolen from Paolo Mantovani
    <span class="token keyword">On Error</span> <span class="token keyword">GoTo</span> ErrH<span class="token punctuation">:</span>

    oDocument <span class="token operator">=</span> thisComponent
    oVCursor <span class="token operator">=</span> oDocument.currentcontroller.getViewCursor<span class="token punctuation">(</span><span class="token punctuation">)</span>
    oText<span class="token operator">=</span>oVCursor.getText<span class="token punctuation">(</span><span class="token punctuation">)</span> ’ AP’s trick <span class="token keyword">to</span> <span class="token keyword">get</span> <span class="token function">text</span> anywhere.
    snot<span class="token operator">=</span>oVCursor.getString<span class="token punctuation">(</span><span class="token punctuation">)</span>
    alpha<span class="token operator">=</span>oVCursor.getStart<span class="token punctuation">(</span><span class="token punctuation">)</span>
    omega<span class="token operator">=</span>oVCursor.getEnd<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">If</span> <span class="token function">len</span><span class="token punctuation">(</span>snot<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">Then</span>		’ <span class="token function">there</span> <span class="token keyword">is</span> a selection<span class="token punctuation">:</span> <span class="token function">use</span> that
        mySelection <span class="token operator">=</span> oText.createTextCursorByRange<span class="token punctuation">(</span>alpha<span class="token punctuation">)</span>
        mySelection.goToRange<span class="token punctuation">(</span>omega<span class="token punctuation">,</span><span class="token keyword">TRUE</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>		’ the cursor <span class="token keyword">is</span> a <span class="token function">point</span><span class="token punctuation">;</span> grab the word it’s <span class="token keyword">in</span>.
        ’ Grabbing the word would be simple<span class="token punctuation">,</span> except that that breakiterator <span class="token keyword">is</span> broken
        ’ <span class="token keyword">in</span> OOo <span class="token number">1.1</span> <span class="token keyword">and</span> I have had <span class="token keyword">to</span> build <span class="token keyword">in</span> workarounds <span class="token keyword">for</span> <span class="token keyword">when</span> <span class="token function">there</span> <span class="token keyword">is</span> any
        ’ punctuation immediatealy before <span class="token keyword">or</span> after the word.
        mySelection <span class="token operator">=</span> oText.createTextCursorByRange<span class="token punctuation">(</span>oVCursor.getstart<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        ’ <span class="token function">at</span> the <span class="token keyword">next</span> <span class="token function">line</span><span class="token punctuation">,</span> it ought <span class="token keyword">to</span> work <span class="token keyword">to</span> <span class="token keyword">do</span> gotoStartOfWord<span class="token punctuation">(</span><span class="token keyword">FALSE</span><span class="token punctuation">)</span>
        ’ but the cursor does <span class="token keyword">not</span> move <span class="token function">at</span> all <span class="token keyword">if</span> it <span class="token keyword">is</span> between a word <span class="token keyword">and</span> any punctuation
        ’ so I have first <span class="token keyword">to</span> check <span class="token keyword">if</span> it did move
        mySelection.gotoStartOfWord<span class="token punctuation">(</span><span class="token keyword">TRUE</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>mySelection.getString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span>
        ’ we have the pnctuation after word bug
            mySelection.goLeft<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">FALSE</span><span class="token punctuation">)</span> ’ move into the word <span class="token keyword">and</span> <span class="token keyword">then</span> <span class="token function">go</span>
            mySelection.gotoStartofWord<span class="token punctuation">(</span><span class="token keyword">FALSE</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span>
        ’ we’re good<span class="token punctuation">,</span> <span class="token keyword">and</span> can just <span class="token function">go</span>
            mySelection.gotoStartofWord<span class="token punctuation">(</span><span class="token keyword">FALSE</span><span class="token punctuation">)</span>
        <span class="token keyword">end</span> <span class="token keyword">if</span>
        mySelection.gotoEndOfWord<span class="token punctuation">(</span><span class="token keyword">TRUE</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span>
    ’ here a routine <span class="token keyword">to</span> check <span class="token keyword">for</span> quotes <span class="token keyword">and</span> other punctuation <span class="token function">at</span> the start <span class="token keyword">of</span> the word ...
    changeme<span class="token operator">=</span>mySelection.getString<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ’	msgbox<span class="token punctuation">(</span><span class="token string">&quot;Changeme now holds &quot;</span> <span class="token operator">+</span> changeme <span class="token operator">+</span><span class="token string">&quot; before the fix&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>changeme<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">then</span> ’ <span class="token function">there</span> was a quote <span class="token function">at</span> the start <span class="token keyword">of</span> the word.
        mySelection.goRight<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">TRUE</span><span class="token punctuation">)</span> ’ so move manually because move<span class="token operator">-</span>by<span class="token operator">-</span>word broken
        mySelection.gotoEndOfWord<span class="token punctuation">(</span><span class="token keyword">TRUE</span><span class="token punctuation">)</span>
        changeme<span class="token operator">=</span>mySelection.getString<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span>
    ’ <span class="token keyword">and</span> <span class="token keyword">end</span> <span class="token keyword">of</span> the complicated workarounds.
    ’ changeme <span class="token keyword">is</span> now the word that the cursor was <span class="token keyword">in</span>
    test1<span class="token operator">=</span><span class="token function">left</span><span class="token punctuation">(</span>changeme<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>’ first <span class="token keyword">char</span> <span class="token keyword">of</span> word <span class="token keyword">of</span> selection
    test2<span class="token operator">=</span><span class="token function">right</span><span class="token punctuation">(</span>changeme<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> ’ last <span class="token keyword">char</span> <span class="token keyword">of</span> word <span class="token keyword">or</span> selection

    <span class="token keyword">if</span> asc<span class="token punctuation">(</span>test1<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">90</span> <span class="token keyword">then</span> ’ word <span class="token operator">/</span> selection must be lowercase<span class="token punctuation">,</span> so turn <span class="token keyword">to</span> title <span class="token keyword">case</span>
        mySelection.setString<span class="token punctuation">(</span>mytitle<span class="token punctuation">(</span>changeme<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>
        ’ the first letter <span class="token keyword">is</span> upper <span class="token keyword">case</span>. <span class="token keyword">Is</span> the last?
        <span class="token keyword">if</span> asc<span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">90</span> <span class="token keyword">then</span>’ no<span class="token punctuation">,</span> so this <span class="token keyword">is</span> <span class="token keyword">in</span> title <span class="token keyword">case</span>. Make it upper <span class="token keyword">case</span>
            mySelection.setstring<span class="token punctuation">(</span>myupper<span class="token punctuation">(</span>changeme<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span> ’it was all upper <span class="token keyword">case</span>. flip it over
            mySelection.setstring<span class="token punctuation">(</span>mylower<span class="token punctuation">(</span>changeme<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">end</span> <span class="token keyword">if</span>
    <span class="token keyword">end</span> <span class="token keyword">if</span>

    ExitPoint<span class="token punctuation">:</span>
        <span class="token keyword">Exit</span> <span class="token keyword">Sub</span>

    ErrH<span class="token punctuation">:</span>
        MsgBox <span class="token string">&quot;Error &quot;</span> <span class="token operator">&amp;</span> err <span class="token operator">&amp;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&amp;</span> <span class="token keyword">error$</span> <span class="token operator">&amp;</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> _
        <span class="token string">&quot;In line : &quot;</span> <span class="token operator">&amp;</span> Erl <span class="token operator">&amp;</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
        <span class="token keyword">Resume</span> ExitPoint
<span class="token keyword">end</span> <span class="token keyword">Sub</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="procedimiento-con-funciones" tabindex="-1"><a class="header-anchor" href="#procedimiento-con-funciones" aria-hidden="true">#</a> Procedimiento con funciones</h2><div class="language-vbnet line-numbers-mode" data-ext="vbnet"><pre class="language-vbnet"><code><span class="token keyword">Function</span> mylower<span class="token punctuation">(</span>astring<span class="token punctuation">)</span>
    ’ returns a lowercase <span class="token keyword">string</span>
    <span class="token keyword">dim</span> l <span class="token keyword">as</span> <span class="token keyword">string</span>
    l <span class="token operator">=</span> <span class="token function">lcase</span><span class="token punctuation">(</span>astring<span class="token punctuation">)</span>
    mylower <span class="token operator">=</span> l
<span class="token keyword">end</span> <span class="token keyword">function</span>

<span class="token keyword">Function</span> myupper<span class="token punctuation">(</span>astring<span class="token punctuation">)</span>
    ’ returns an uppercased <span class="token keyword">string</span>
    <span class="token keyword">dim</span> l <span class="token keyword">as</span> <span class="token keyword">string</span>
    l <span class="token operator">=</span> <span class="token function">ucase</span><span class="token punctuation">(</span>astring<span class="token punctuation">)</span>
    myupper <span class="token operator">=</span> l
<span class="token keyword">end</span> <span class="token keyword">function</span>

<span class="token keyword">Function</span> mytitle<span class="token punctuation">(</span>astring<span class="token punctuation">)</span>
    <span class="token keyword">dim</span> t <span class="token keyword">as</span> <span class="token keyword">string</span>
    <span class="token keyword">dim</span> allwords<span class="token punctuation">,</span> i
    t <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token function">ucase</span><span class="token punctuation">(</span><span class="token function">left</span><span class="token punctuation">(</span>astring<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token function">lcase</span><span class="token punctuation">(</span><span class="token function">mid</span><span class="token punctuation">(</span>astring<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    mytitle <span class="token operator">=</span> t
<span class="token keyword">end</span> <span class="token keyword">function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function r(k,u){return e(),o("div",null,[l,t(" more "),i])}const v=a(c,[["render",r],["__file","2011-03-18-macros-openoffice-iv.html.vue"]]);export{v as default};
